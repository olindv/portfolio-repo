extends ../main.layout.pug

block text-blog
    .info__text--blog
        h1.info__title--blog БЛОГ
        h2.info__desc--blog Статьи, которые я написал

block arrow-down
  .header__down.header__down--display-none
    a(href="#").header__down-link
      +icon('arrow_down','arrow_down-icon')

block variables
  - var title = 'Блог'

block scripts
  script(src='blog.bundle.js')

block content
    section.stuff
        .stuff__triangles.stuff__triangles--position
            svg(fill="#fff", viewbox="0 0 900 150", class="triangle", preserveAspectRatio="none")
                polygon(points="0,0 0,150 900,150")
            svg(fill="#fff", viewbox="0 0 900 150", class="triangle", preserveAspectRatio="none")
                polygon(points="0,150 900,150 900,0")
    section.blog
        .blog__container
            .blog__left
                aside.aside
                    ul.aside__menu.aside__menu--relative
                        li.aside__menu-item
                            a(href="#" data-name="art first").aside__menu-link Самое важное в SASS
                        li.aside__menu-item
                            a(href="#" data-name="art second").aside__menu-link Приёмы в вёрстке, без которых не обходится ни один сайт
                        li.aside__menu-item
                            a(href="#" data-name="art third").aside__menu-link Самый необходимый набор Gulp плагинов
                        li.aside__menu-item
                            a(href="#" data-name="art fourth").aside__menu-link Почему я выбрал Pug
            .blog__right
                .blog__right-content
                    ul.blog__list
                        li.blog__item(data-name="art first")
                            .article__blog-header
                                h2.article__blog-title Самое важное в SASS
                                time(datetime="2018-12-23").article__blog-date 23 декабря 2018
                            .article__blog-content
                                p.article__blog-text Написание CSS само по себе весело, но когда таблица стилей становится огромной, то становится и сложно её обслуживать. И вот в таком случае нам поможет препроцессор. Sass позволяет использовать функции недоступные в самом CSS, например, переменные, вложенности, миксины, наследование и другие приятные вещи, возвращающие удобство написания CSS. Как только Вы начинаете пользоваться Sass, препроцессор обрабатывает ваш Sass-файл и сохраняет его как простой CSS-файл, который Вы сможете использовать на любом сайте. Самый простой способ получить такой результат - использовать терминал. После того, как Sass установлен, вы можете компилировать ваш Sass в CSS, используя команду sass. Вам всего лишь нужно сообщить Sass, где взять файл Sass и в какой файл CSS его скомпилировать. Например, запустив команду sass input.scss output.css в терминале, вы сообщаете Sass взять один Sass файл, input.scss, и скомпилировать в файл output.css.
                                p.article__blog-text Не следует, однако забывать, что укрепление и развитие структуры обеспечивает широкому кругу (специалистов) участие в формировании систем массового участия. Идейные соображения высшего порядка, а также рамки и место обучения кадров обеспечивает широкому кругу (специалистов) участие в формировании позиций, занимаемых участниками в отношении поставленных задач. Товарищи! постоянный количественный рост и сфера нашей активности способствует подготовки и реализации модели развития. С другой стороны рамки и место обучения кадров влечет за собой процесс внедрения и модернизации системы обучения кадров, соответствует насущным потребностям.
                                .article__blog-image
                                    +image('blog_example.png', 'Example', 'img')
                        li.blog__item(data-name="art second")
                            .article__blog-header
                                h2.article__blog-title Приёмы в вёрстке, без которых не обходится ни один сайт
                                time(datetime="2018-12-23").article__blog-date 23 декабря 2018
                            .article__blog-content
                                p.article__blog-text Часто бывает так, что хорошие блоги с качественными экспертными материалами остаются незамеченными. Почему это происходит? По разным причинам. Но одна из самых распространенных заключается в том, что их владельцы просто не могут обеспечить нужный уровень комфорта для пользователей.Не часто встретишь UX-проектировщика и верстальщика в одном лице. Но верстальщикам время от времени приходится принимать решения, которые могут повлиять на взаимодействие: сделать его удобным или отвратительным, в зависимости от того, как будет сверстан компонент. Не важно, верстаете ли вы под мобильные без макета или просто добавляете кнопку, о которой забыли на этапе проектирования, вам нужно как минимум знать основы.
                                p.article__blog-text Для начала предлагаю обратить внимание на типичную ошибку новичка: ссылки и кнопки маленького размера, между ними мало пространства. Это ок, если взаимодействие происходит мышкой, но совершенно не годится, когда речь идет о тач-устройствах. Многократные попытки попасть по ссылке, которые в результате приводят к попаданию по соседней ссылке, очень быстро выводят пользователей из себя. Наверняка каждый из нас бывал в такой ситуации, и первое, что хочется сделать, — покинуть неудобный сайт.
                        li.blog__item(data-name="art third")
                            .article__blog-header
                                h2.article__blog-title Самый необходимый набор Gulp плагинов
                                time(datetime="2018-12-23").article__blog-date 23 декабря 2018
                            .article__blog-content
                                p.article__blog-text Требуемые плагины при написании автоматизированных задач могут стать очень тяжёлыми в плане количества require, которые вы должны добавить. С помощью этого плагина вы можете просто попросить gulp автоматически включить все задачи. И можете спросить меня, как получить доступ к именам плагинов, потому что все эти имена вам потребуются позже. Да, вы правы, gulp-load-plugins берёт на себя заботу по автоматическому созданию имён на основе имени пакета в формате CamelCase и сохраняет их в объект, к которому вы можете легко получить доступ. Gulp-browser-sync — вероятно, самый нужный инструмент, с точки зрения повышения продуктивности веб-разработчиков. BrowserSync создает подключение, после чего производит автообновление страницы во всех браузерах на всех устройствах при изменениями не только клиентских или даже серверных файлов. А плюс ко всему синхронизирует позицию скроллинга и заполненные данные в формах.
                                p.article__blog-text Внимание! Локально установится та версия галпа, что и глобальная. При установке gulp название пакета и его версия автоматически пропишутся в файле package.json. Вообще такой подход позволяет сохранять файл package.json со всеми установленными пакетами (зависимости), а при разворачивании нового проекта достаточно скопировать данный файл и запустить команду установки в консоли проекта — npm install и все пакеты в проект установятся автоматически. Сейчас может вам будет не совсем понятно, но дальше я уверен вы поймете.gulp-autopolyfiller — мега крутой плагин, который похож на Autoprefixer и подбирает все необходимые полифилы для JavaScript, чтобы вы могли использовать последние стандарты ECMAScript уже сегодня. Еще рекомендую gulp-babel, который конвертирует ES6/ES7 в ES5. 
                        li.blog__item(data-name="art fourth")
                            .article__blog-header
                                h2.article__blog-title Почему я выбрал Pug
                                time(datetime="2018-12-23").article__blog-date 23 декабря 2018
                            .article__blog-content
                                p.article__blog-text В большинстве случаев в процессе верстки сайта на чистом HTML разработчику будет не хватать его возможностей. Прежде всего давайте обратим внимание на то, что в Pug теги не закрываются — это осуществляется с помощью табуляции. Pug предоставляет возможность вынесения блоков кода в виде модулей и подключение их на различных html страницах. Это очень удобно при верстке многостраничных проектов. Например, очень часто возникает ситуация, когда есть множество страниц, у которых одинаковый блок кода (шапка, футер, меню и т.д). И, однажды, возникает необходимость внести правку в код. При использовании pug, достаточно внести изменения в одном месте и они автоматически применятся ко всем страницам, а в случае чистого html пришлось бы вручную редактировать множество страниц, что затратно по времени. Для установки pug необходим пакетный менеджер npm, который входит в состав nodejs. Если у вас не установлен nodejs, достаточно зайти на сайт nodejs.org и скачать установщик. Установка nodejs не отличается от установки обычных программ. Если установка прошла корректно, то pug готов к использованию. Теперь можно попробовать написать первую страничку с его помощью. 
                                p.article__blog-text HTML-препроцессор Pug — это всё тот же Jade, только Pug. Создатель решил изменить имя своего продукта после претензий со стороны какой-то компании. Технически, Pug — это Jade второй версии, пока что находящийся в альфе. В данном шаблонизаторе используется минимум уголков и скобочек. Это удобно и способствует ускорению работы верстальщика. Наследование шаблонов — это главная «плюшка» шаблонизаторов. Так же существует возможность создавать миксины. На чистом HTML нет ничего подобного. Просто пришлось бы монотонно дублировать код статьи, менять ей текст, и так далее, пока не заполнятся все статьи — получилось бы очень много кода, в котором легко потеряться.    

                                
        
                
